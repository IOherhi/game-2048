{"mappings":"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","sources":["<anon>","src/modules/Game.class.js"],"sourcesContent":["var $a5fd07fa01589658$exports = {};\n\"use strict\";\n/* ========================================== */ const $a5fd07fa01589658$var$tbody = document.querySelector(\"tbody\");\nconst $a5fd07fa01589658$var$buttonOfStart = document.querySelector(\"button\");\nconst $a5fd07fa01589658$var$arrayTr = Array.from($a5fd07fa01589658$var$tbody.children);\n/* ===================================================== */ class $a5fd07fa01589658$var$Game {\n    constructor(ss){\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\"; // або 'finished' (гра завершена)\n    }\n    start() {\n        this.deleteMessage();\n        this.clearBoard();\n        this.restart();\n        this.addSCore();\n        this.spawnTile();\n        this.spawnTile();\n        this.updateBoardFromDOM();\n    }\n    deleteMessage() {\n        const message = document.querySelector(\".message-container\");\n        const messageStart = message.children[2];\n        messageStart.classList.remove(\"message-lose\");\n        messageStart.classList.remove(\"message-win\");\n        messageStart.classList.remove(\"message\");\n        messageStart.textContent = \"\";\n    }\n    spawnTile() {\n        const randomNumber = ()=>Math.floor(Math.random() * 4);\n        const randomTwoOrForth = ()=>Math.random() < 0.1 ? 4 : 2;\n        const arraytr = Array.from($a5fd07fa01589658$var$tbody.children);\n        let canAddNewElement = false;\n        for (const array of arraytr)if (Array.from(array.children).some((td)=>td.textContent === \"\")) {\n            canAddNewElement = true;\n            break; // Зупиняємо цикл, якщо знайшли порожню клітинку\n        }\n        if (canAddNewElement) {\n            let randomTd;\n            let finish = false;\n            while(!finish){\n                randomTd = $a5fd07fa01589658$var$arrayTr[randomNumber()].children[randomNumber()];\n                if (!randomTd.classList.contains(\"activ\")) {\n                    randomTd.textContent = randomTwoOrForth();\n                    randomTd.classList.add(\"activ\");\n                    if (+randomTd.textContent === 2) randomTd.classList.add(\"field-cell--2\");\n                    if (+randomTd.textContent === 4) randomTd.classList.add(\"field-cell--4\");\n                    finish = true; // Зупиняємо цикл, коли плитка додана\n                }\n            }\n        }\n    }\n    updateBoardFromDOM = ()=>{\n        Array.from($a5fd07fa01589658$var$tbody.children).forEach((tr, indexTr)=>{\n            Array.from(tr.children).forEach((td, indexTd)=>{\n                this.board[indexTr][indexTd] = td.textContent === \"\" ? 0 : td.textContent;\n            });\n        });\n    };\n    clearBoard() {\n        const cells = $a5fd07fa01589658$var$tbody.querySelectorAll(\"td\");\n        cells.forEach((cell)=>{\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n            cell.removeAttribute(\"style\");\n        });\n    }\n    restart() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        const button = document.querySelector(\".button\");\n        const messageConT = document.querySelector(\".message-container\");\n        if (button.textContent === \"Start\") {\n            button.style.fontSize = \"18px\";\n            button.textContent = \"Restart\";\n            button.classList.add(\"restart\");\n        } else {\n            button.style.fontSize = \"18px\";\n            button.textContent = \"Start\";\n            button.classList.remove(\"restart\");\n            button.classList.add(\"start\");\n            messageConT.children[2].textContent = 'Press \"Start\" to begin game. Good luck!';\n            messageConT.children[2].classList.add(\"message-start\");\n            messageConT.children[2].classList.add(\"message\");\n        }\n        this.deleteMessage();\n    }\n    createEmptyBoard() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    addColor() {\n        Array.from($a5fd07fa01589658$var$tbody.children).forEach((tr)=>{\n            Array.from(tr.children).forEach((td)=>{\n                const tdContent = td.textContent;\n                switch(+tdContent){\n                    case 2:\n                        td.classList.add(\"field-cell--2\");\n                        break;\n                    case 4:\n                        td.classList.add(\"field-cell--4\");\n                        break;\n                    case 8:\n                        td.classList.add(\"field-cell--8\");\n                        break;\n                    case 16:\n                        td.classList.add(\"field-cell--16\");\n                        break;\n                    case 32:\n                        td.classList.add(\"field-cell--32\");\n                        break;\n                    case 64:\n                        td.classList.add(\"field-cell--64\");\n                        break;\n                    case 128:\n                        td.classList.add(\"field-cell--128\");\n                        break;\n                    case 256:\n                        td.classList.add(\"field-cell--256\");\n                        break;\n                    case 512:\n                        td.classList.add(\"field-cell--512\");\n                        break;\n                    case 1024:\n                        td.classList.add(\"field-cell--1024\");\n                        break;\n                    case 2048:\n                        td.classList.add(\"field-cell--2048\");\n                        break;\n                }\n            });\n        });\n    }\n    canContinueGame() {\n        const columns = [\n            [],\n            [],\n            [],\n            []\n        ];\n        // Перетворюємо стовпці в масиви\n        this.board.forEach((row)=>{\n            columns[0].push(row[0]);\n            columns[1].push(row[1]);\n            columns[2].push(row[2]);\n            columns[3].push(row[3]);\n        });\n        // Перевірка на склеювання комірок стовпців.\n        const columnMerge = (column)=>{\n            const newColumn = column.filter((item)=>item !== 0);\n            const newColumnLength = newColumn.length;\n            let y = 0;\n            while(y < newColumnLength){\n                if (newColumn[y] === newColumn[y + 1]) return true;\n                y++;\n            }\n        };\n        // Обробляємо кожен стовпець\n        for (const column of columns){\n            if (columnMerge(column)) return true; // Якщо хоча б в одному стовпці є злиття\n        }\n        // =============================================\n        const rows = [\n            [],\n            [],\n            [],\n            []\n        ];\n        this.board.forEach((row, i)=>{\n            rows[i].push(row[0]);\n            rows[i].push(row[1]);\n            rows[i].push(row[2]);\n            rows[i].push(row[3]);\n        });\n        // Перевірка на склеювання комірок рядків.\n        const rowsMerge = (row)=>{\n            const newRow = row.filter((item)=>item !== 0);\n            const newRowLength = newRow.length;\n            let y = 0;\n            while(y < newRowLength){\n                if (newRow[y] === newRow[y + 1]) return true;\n                y++;\n            }\n        };\n        for (const row of rows){\n            if (rowsMerge(row)) return true;\n        }\n        // Перевірка на порожні комірки.\n        for (const row of this.board){\n            if (row.includes(0)) return true;\n        }\n        // Перевірка на рух.\n        return false;\n    }\n    addSCore() {\n        const gameScore = document.querySelector(\".game-score\");\n        gameScore.textContent = this.score;\n    }\n    getMessage() {\n        const messageConT = document.querySelector(\".message-container\");\n        messageConT.children[2].textContent = messageConT.children[0].textContent;\n        messageConT.children[2].classList.add(\"message-lose\");\n        messageConT.children[2].classList.add(\"message\");\n    }\n    getMessageWin() {\n        const messageConT = document.querySelector(\".message-container\");\n        const messageWin = document.querySelector(\".message-win\");\n        messageConT.children[2].textContent = messageWin.textContent;\n        messageConT.children[2].classList.add(\"message-win\");\n        messageConT.children[2].classList.add(\"message\");\n    }\n    moveUp() {\n        if (!this.canContinueGame()) {\n            this.getMessage();\n            this.status = \"finished\";\n            return;\n        }\n        const oldBoard = JSON.stringify(this.board);\n        const column1 = [];\n        const column2 = [];\n        const column3 = [];\n        const column4 = [];\n        this.board.forEach((row)=>{\n            column1.push(row[0]);\n            column2.push(row[1]);\n            column3.push(row[2]);\n            column4.push(row[3]);\n        });\n        const mergeColumn = (column)=>{\n            const merged = column.filter((cell)=>cell !== 0);\n            const result = [];\n            let i = 0;\n            while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                result.push(merged[i] * 2);\n                this.score += merged[i] * 2;\n                i += 2;\n            } else {\n                result.push(merged[i]);\n                i++;\n            }\n            while(result.length < 4)result.push(0);\n            return result;\n        };\n        const newColumn1 = mergeColumn(column1);\n        const newColumn2 = mergeColumn(column2);\n        const newColumn3 = mergeColumn(column3);\n        const newColumn4 = mergeColumn(column4);\n        this.board = [\n            [\n                newColumn1[0],\n                newColumn2[0],\n                newColumn3[0],\n                newColumn4[0]\n            ],\n            [\n                newColumn1[1],\n                newColumn2[1],\n                newColumn3[1],\n                newColumn4[1]\n            ],\n            [\n                newColumn1[2],\n                newColumn2[2],\n                newColumn3[2],\n                newColumn4[2]\n            ],\n            [\n                newColumn1[3],\n                newColumn2[3],\n                newColumn3[3],\n                newColumn4[3]\n            ]\n        ];\n        this.clearBoard();\n        const arrayFromTr = Array.from($a5fd07fa01589658$var$tbody.children);\n        for(let i = 0; i < arrayFromTr.length; i++){\n            const currentTr = arrayFromTr[i].children;\n            currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n            currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n            currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n            currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n            if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n            if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n            if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n            if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard !== newBoard) this.spawnTile();\n        this.addColor();\n        this.addSCore();\n        const has2048 = this.board.some((row)=>row.includes(2048));\n        if (has2048) this.getMessageWin();\n        this.updateBoardFromDOM();\n    }\n    moveDown() {\n        const column1 = [];\n        const column2 = [];\n        const column3 = [];\n        const column4 = [];\n        // Перетворюємо стовпці в масиви\n        this.board.forEach((row)=>{\n            column1.push(row[0]);\n            column2.push(row[1]);\n            column3.push(row[2]);\n            column4.push(row[3]);\n        });\n        const mergeColumn = (column)=>{\n            // Спочатку фільтруємо нулі\n            const merged = column.filter((cell)=>cell !== 0);\n            const result = [];\n            let i = 0;\n            // Злиття плиток\n            while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                result.push(merged[i] * 2); // Подвоїти плитки\n                this.score += merged[i] * 2; // Додаємо до рахунку\n                i += 2; // Пропускаємо наступну плитку після злиття\n            } else {\n                result.push(merged[i]); // Якщо плитки не однакові\n                i++;\n            }\n            // Переміщуємо плитки вниз, щоб не було проміжків\n            while(result.length < 4)result.unshift(0);\n            return result;\n        };\n        const oldBoard = JSON.stringify(this.board);\n        // Обробляємо кожен стовпець\n        const newColumn1 = mergeColumn(column1);\n        const newColumn2 = mergeColumn(column2);\n        const newColumn3 = mergeColumn(column3);\n        const newColumn4 = mergeColumn(column4);\n        this.board = [\n            [\n                newColumn1[0],\n                newColumn2[0],\n                newColumn3[0],\n                newColumn4[0]\n            ],\n            [\n                newColumn1[1],\n                newColumn2[1],\n                newColumn3[1],\n                newColumn4[1]\n            ],\n            [\n                newColumn1[2],\n                newColumn2[2],\n                newColumn3[2],\n                newColumn4[2]\n            ],\n            [\n                newColumn1[3],\n                newColumn2[3],\n                newColumn3[3],\n                newColumn4[3]\n            ]\n        ];\n        // Очищаємо дошку\n        this.clearBoard();\n        // Оновлення значень на сторінці\n        const arrayFromTr = Array.from($a5fd07fa01589658$var$tbody.children);\n        for(let i = 0; i < arrayFromTr.length; i++){\n            const currentTr = arrayFromTr[i].children;\n            currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n            currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n            currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n            currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n            if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n            if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n            if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n            if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard !== newBoard) this.spawnTile();\n        this.addColor();\n        this.addSCore();\n        const has2048 = this.board.some((row)=>row.includes(2048));\n        if (has2048) this.getMessageWin();\n        // Оновлюємо дошку\n        this.updateBoardFromDOM();\n    }\n    moveRight() {\n        if (!this.canContinueGame()) {\n            this.getMessage();\n            this.status = \"finished\";\n            return;\n        }\n        const mergeColumn = (row)=>{\n            const merged = row.filter((cell)=>cell !== 0);\n            const result = [];\n            let i = 0;\n            // Злиття плиток\n            while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                result.push(merged[i] * 2); // Подвоїти плитки\n                this.score += merged[i] * 2; // Додаємо до рахунку\n                i += 2; // Пропускаємо наступну плитку після злиття\n            } else {\n                result.push(merged[i]); // Якщо плитки не однакові\n                i++;\n            }\n            // Переміщуємо плитки вправо, щоб не було проміжків\n            while(result.length < 4)result.unshift(0);\n            return result;\n        };\n        const oldBoard = JSON.stringify(this.board);\n        // Обробляємо кожен рядок\n        const arraRow = this.board.map((row)=>mergeColumn(row));\n        this.board = [\n            [\n                arraRow[0][0],\n                arraRow[0][1],\n                arraRow[0][2],\n                arraRow[0][3]\n            ],\n            [\n                arraRow[1][0],\n                arraRow[1][1],\n                arraRow[1][2],\n                arraRow[1][3]\n            ],\n            [\n                arraRow[2][0],\n                arraRow[2][1],\n                arraRow[2][2],\n                arraRow[2][3]\n            ],\n            [\n                arraRow[3][0],\n                arraRow[3][1],\n                arraRow[3][2],\n                arraRow[3][3]\n            ]\n        ];\n        // Очищаємо дошку\n        this.clearBoard();\n        // Оновлення значень на сторінці\n        const arrayFromTr = Array.from($a5fd07fa01589658$var$tbody.children);\n        for(let i = 0; i < arrayFromTr.length; i++){\n            const currentTr = arrayFromTr[i].children;\n            currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n            currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n            currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n            currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n            if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n            if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n            if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n            if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard !== newBoard) this.spawnTile();\n        this.addColor();\n        this.addSCore();\n        const has2048 = this.board.some((row)=>row.includes(2048));\n        if (has2048) this.getMessageWin();\n        // Оновлюємо дошку\n        this.updateBoardFromDOM();\n    }\n    moveLeft() {\n        const mergeColumn = (row)=>{\n            const merged = row.filter((cell)=>cell !== 0);\n            const result = [];\n            let i = 0;\n            // Злиття плиток\n            while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                result.push(merged[i] * 2); // Подвоїти плитки\n                this.score += merged[i] * 2; // Додаємо до рахунку\n                i += 2; // Пропускаємо наступну плитку після злиття\n            } else {\n                result.push(merged[i]); // Якщо плитки не однакові\n                i++;\n            }\n            // Переміщуємо плитки вправо, щоб не було проміжків\n            while(result.length < 4)result.push(0);\n            return result;\n        };\n        const oldBoard = JSON.stringify(this.board);\n        // Обробляємо кожен рядок\n        const arraRow = this.board.map((row)=>mergeColumn(row));\n        this.board = [\n            [\n                arraRow[0][0],\n                arraRow[0][1],\n                arraRow[0][2],\n                arraRow[0][3]\n            ],\n            [\n                arraRow[1][0],\n                arraRow[1][1],\n                arraRow[1][2],\n                arraRow[1][3]\n            ],\n            [\n                arraRow[2][0],\n                arraRow[2][1],\n                arraRow[2][2],\n                arraRow[2][3]\n            ],\n            [\n                arraRow[3][0],\n                arraRow[3][1],\n                arraRow[3][2],\n                arraRow[3][3]\n            ]\n        ];\n        // Очищаємо дошку\n        this.clearBoard();\n        // Оновлення значень на сторінці\n        const arrayFromTr = Array.from($a5fd07fa01589658$var$tbody.children);\n        for(let i = 0; i < arrayFromTr.length; i++){\n            const currentTr = arrayFromTr[i].children;\n            currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n            currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n            currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n            currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n            if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n            if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n            if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n            if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n        }\n        const newBoard = JSON.stringify(this.board);\n        if (oldBoard !== newBoard) this.spawnTile();\n        this.addColor();\n        this.addSCore();\n        const has2048 = this.board.some((row)=>row.includes(2048));\n        if (has2048) this.getMessageWin();\n        // Оновлюємо дошку\n        this.updateBoardFromDOM();\n    }\n}\nconst $a5fd07fa01589658$var$game2048 = new $a5fd07fa01589658$var$Game();\n$a5fd07fa01589658$var$buttonOfStart.addEventListener(\"click\", ()=>{\n    $a5fd07fa01589658$var$game2048.start();\n});\ndocument.addEventListener(\"keydown\", (ewent)=>{\n    switch(ewent.key){\n        case \"ArrowUp\":\n            $a5fd07fa01589658$var$game2048.moveUp();\n            break;\n        case \"ArrowDown\":\n            $a5fd07fa01589658$var$game2048.moveDown();\n            break;\n        case \"ArrowRight\":\n            $a5fd07fa01589658$var$game2048.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $a5fd07fa01589658$var$game2048.moveLeft();\n            break;\n    }\n});\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n//# sourceMappingURL=index.791f1482.js.map\n","\"use strict\";\n\n/* ========================================== */\n\nconst tbody = document.querySelector(\"tbody\");\nconst buttonOfStart = document.querySelector(\"button\");\nconst arrayTr = Array.from(tbody.children);\n\n/* ===================================================== */\n\nclass Game {\n  constructor(ss) {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = \"playing\"; // або 'finished' (гра завершена)\n  }\n\n  start() {\n    this.deleteMessage();\n    this.clearBoard();\n    this.restart();\n    this.addSCore();\n\n    this.spawnTile();\n    this.spawnTile();\n    this.updateBoardFromDOM();\n  }\n\n  deleteMessage() {\n    const message = document.querySelector(\".message-container\");\n    const messageStart = message.children[2];\n\n    messageStart.classList.remove(\"message-lose\");\n    messageStart.classList.remove(\"message-win\");\n    messageStart.classList.remove(\"message\");\n\n    messageStart.textContent = \"\";\n  }\n\n  spawnTile() {\n    const randomNumber = () => Math.floor(Math.random() * 4);\n    const randomTwoOrForth = () => (Math.random() < 0.1 ? 4 : 2);\n    const arraytr = Array.from(tbody.children);\n    let canAddNewElement = false;\n\n    for (const array of arraytr) {\n      if (Array.from(array.children).some((td) => td.textContent === \"\")) {\n        canAddNewElement = true;\n        break; // Зупиняємо цикл, якщо знайшли порожню клітинку\n      }\n    }\n\n    if (canAddNewElement) {\n      let randomTd;\n      let finish = false;\n\n      while (!finish) {\n        randomTd = arrayTr[randomNumber()].children[randomNumber()];\n\n        if (!randomTd.classList.contains(\"activ\")) {\n          randomTd.textContent = randomTwoOrForth();\n          randomTd.classList.add(\"activ\");\n\n          if (+randomTd.textContent === 2) {\n            randomTd.classList.add(\"field-cell--2\");\n          }\n\n          if (+randomTd.textContent === 4) {\n            randomTd.classList.add(\"field-cell--4\");\n          }\n\n          finish = true; // Зупиняємо цикл, коли плитка додана\n        }\n      }\n    }\n  } // Додає випадкову плитку.\n\n  updateBoardFromDOM = () => {\n    Array.from(tbody.children).forEach((tr, indexTr) => {\n      Array.from(tr.children).forEach((td, indexTd) => {\n        this.board[indexTr][indexTd] =\n          td.textContent === \"\" ? 0 : td.textContent;\n      });\n    });\n  }; // Перезапускає поле.\n\n  clearBoard() {\n    const cells = tbody.querySelectorAll(\"td\");\n\n    cells.forEach((cell) => {\n      cell.textContent = \"\";\n      cell.className = \"field-cell\";\n      cell.removeAttribute(\"style\");\n    });\n  } // Очищає поле гри.\n\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = \"playing\";\n\n    const button = document.querySelector(\".button\");\n    const messageConT = document.querySelector(\".message-container\");\n\n    if (button.textContent === \"Start\") {\n      button.style.fontSize = \"18px\";\n      button.textContent = \"Restart\";\n      button.classList.add(\"restart\");\n    } else {\n      button.style.fontSize = \"18px\";\n      button.textContent = \"Start\";\n      button.classList.remove(\"restart\");\n      button.classList.add(\"start\");\n\n      messageConT.children[2].textContent =\n        'Press \"Start\" to begin game. Good luck!';\n      messageConT.children[2].classList.add(\"message-start\");\n      messageConT.children[2].classList.add(\"message\");\n    }\n\n    this.deleteMessage();\n  } // Перезапускає гру, обнуляючи рахунки.\n\n  createEmptyBoard() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  } // Створює поле гри.\n\n  getScore() {\n    return this.score;\n  } // Повертає Score.\n\n  getStatus() {\n    return this.status;\n  } // Повертає Status.\n\n  addColor() {\n    Array.from(tbody.children).forEach((tr) => {\n      Array.from(tr.children).forEach((td) => {\n        const tdContent = td.textContent;\n\n        switch (+tdContent) {\n          case 2:\n            td.classList.add(\"field-cell--2\");\n            break;\n\n          case 4:\n            td.classList.add(\"field-cell--4\");\n            break;\n\n          case 8:\n            td.classList.add(\"field-cell--8\");\n            break;\n\n          case 16:\n            td.classList.add(\"field-cell--16\");\n            break;\n\n          case 32:\n            td.classList.add(\"field-cell--32\");\n            break;\n\n          case 64:\n            td.classList.add(\"field-cell--64\");\n            break;\n\n          case 128:\n            td.classList.add(\"field-cell--128\");\n            break;\n\n          case 256:\n            td.classList.add(\"field-cell--256\");\n            break;\n\n          case 512:\n            td.classList.add(\"field-cell--512\");\n            break;\n\n          case 1024:\n            td.classList.add(\"field-cell--1024\");\n            break;\n\n          case 2048:\n            td.classList.add(\"field-cell--2048\");\n            break;\n        }\n      });\n    });\n  } // Різні кольори до плиток на основі їх значень.\n\n  canContinueGame() {\n    const columns = [[], [], [], []];\n\n    // Перетворюємо стовпці в масиви\n    this.board.forEach((row) => {\n      columns[0].push(row[0]);\n      columns[1].push(row[1]);\n      columns[2].push(row[2]);\n      columns[3].push(row[3]);\n    });\n\n    // Перевірка на склеювання комірок стовпців.\n    const columnMerge = (column) => {\n      const newColumn = column.filter((item) => item !== 0);\n      const newColumnLength = newColumn.length;\n      let y = 0;\n\n      while (y < newColumnLength) {\n        if (newColumn[y] === newColumn[y + 1]) {\n          return true;\n        }\n\n        y++;\n      }\n    };\n\n    // Обробляємо кожен стовпець\n    for (const column of columns) {\n      if (columnMerge(column)) {\n        return true; // Якщо хоча б в одному стовпці є злиття\n      }\n    }\n\n    // =============================================\n\n    const rows = [[], [], [], []];\n\n    this.board.forEach((row, i) => {\n      rows[i].push(row[0]);\n      rows[i].push(row[1]);\n      rows[i].push(row[2]);\n      rows[i].push(row[3]);\n    });\n\n    // Перевірка на склеювання комірок рядків.\n    const rowsMerge = (row) => {\n      const newRow = row.filter((item) => item !== 0);\n      const newRowLength = newRow.length;\n      let y = 0;\n\n      while (y < newRowLength) {\n        if (newRow[y] === newRow[y + 1]) {\n          return true;\n        }\n\n        y++;\n      }\n    };\n\n    for (const row of rows) {\n      if (rowsMerge(row)) {\n        return true;\n      }\n    }\n\n    // Перевірка на порожні комірки.\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    // Перевірка на рух.\n\n    return false;\n  }\n\n  addSCore() {\n    const gameScore = document.querySelector(\".game-score\");\n\n    gameScore.textContent = this.score;\n  }\n\n  getMessage() {\n    const messageConT = document.querySelector(\".message-container\");\n\n    messageConT.children[2].textContent = messageConT.children[0].textContent;\n    messageConT.children[2].classList.add(\"message-lose\");\n    messageConT.children[2].classList.add(\"message\");\n  }\n\n  getMessageWin() {\n    const messageConT = document.querySelector(\".message-container\");\n    const messageWin = document.querySelector(\".message-win\");\n\n    messageConT.children[2].textContent = messageWin.textContent;\n    messageConT.children[2].classList.add(\"message-win\");\n    messageConT.children[2].classList.add(\"message\");\n  }\n\n  moveUp() {\n    if (!this.canContinueGame()) {\n      this.getMessage();\n      this.status = \"finished\";\n\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    const column1 = [];\n    const column2 = [];\n    const column3 = [];\n    const column4 = [];\n\n    this.board.forEach((row) => {\n      column1.push(row[0]);\n      column2.push(row[1]);\n      column3.push(row[2]);\n      column4.push(row[3]);\n    });\n\n    const mergeColumn = (column) => {\n      const merged = column.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2);\n          this.score += merged[i] * 2;\n          i += 2;\n        } else {\n          result.push(merged[i]);\n          i++;\n        }\n      }\n\n      while (result.length < 4) {\n        result.push(0);\n      }\n\n      return result;\n    };\n\n    const newColumn1 = mergeColumn(column1);\n    const newColumn2 = mergeColumn(column2);\n    const newColumn3 = mergeColumn(column3);\n    const newColumn4 = mergeColumn(column4);\n\n    this.board = [\n      [newColumn1[0], newColumn2[0], newColumn3[0], newColumn4[0]],\n      [newColumn1[1], newColumn2[1], newColumn3[1], newColumn4[1]],\n      [newColumn1[2], newColumn2[2], newColumn3[2], newColumn4[2]],\n      [newColumn1[3], newColumn2[3], newColumn3[3], newColumn4[3]],\n    ];\n\n    this.clearBoard();\n\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n      currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n      currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n      currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    this.updateBoardFromDOM();\n  } // Рух в верх.\n\n  moveDown() {\n    const column1 = [];\n    const column2 = [];\n    const column3 = [];\n    const column4 = [];\n\n    // Перетворюємо стовпці в масиви\n    this.board.forEach((row) => {\n      column1.push(row[0]);\n      column2.push(row[1]);\n      column3.push(row[2]);\n      column4.push(row[3]);\n    });\n\n    const mergeColumn = (column) => {\n      // Спочатку фільтруємо нулі\n      const merged = column.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вниз, щоб не було проміжків\n      while (result.length < 4) {\n        result.unshift(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен стовпець\n    const newColumn1 = mergeColumn(column1);\n    const newColumn2 = mergeColumn(column2);\n    const newColumn3 = mergeColumn(column3);\n    const newColumn4 = mergeColumn(column4);\n\n    this.board = [\n      [newColumn1[0], newColumn2[0], newColumn3[0], newColumn4[0]],\n      [newColumn1[1], newColumn2[1], newColumn3[1], newColumn4[1]],\n      [newColumn1[2], newColumn2[2], newColumn3[2], newColumn4[2]],\n      [newColumn1[3], newColumn2[3], newColumn3[3], newColumn4[3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n      currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n      currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n      currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Рух в вниз.\n\n  moveRight() {\n    if (!this.canContinueGame()) {\n      this.getMessage();\n      this.status = \"finished\";\n\n      return;\n    }\n\n    const mergeColumn = (row) => {\n      const merged = row.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вправо, щоб не було проміжків\n      while (result.length < 4) {\n        result.unshift(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен рядок\n\n    const arraRow = this.board.map((row) => mergeColumn(row));\n\n    this.board = [\n      [arraRow[0][0], arraRow[0][1], arraRow[0][2], arraRow[0][3]],\n      [arraRow[1][0], arraRow[1][1], arraRow[1][2], arraRow[1][3]],\n      [arraRow[2][0], arraRow[2][1], arraRow[2][2], arraRow[2][3]],\n      [arraRow[3][0], arraRow[3][1], arraRow[3][2], arraRow[3][3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n      currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n      currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n      currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Тільки ровні пацани йдуть туди.\n\n  moveLeft() {\n    const mergeColumn = (row) => {\n      const merged = row.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вправо, щоб не було проміжків\n      while (result.length < 4) {\n        result.push(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен рядок\n\n    const arraRow = this.board.map((row) => mergeColumn(row));\n\n    this.board = [\n      [arraRow[0][0], arraRow[0][1], arraRow[0][2], arraRow[0][3]],\n      [arraRow[1][0], arraRow[1][1], arraRow[1][2], arraRow[1][3]],\n      [arraRow[2][0], arraRow[2][1], arraRow[2][2], arraRow[2][3]],\n      [arraRow[3][0], arraRow[3][1], arraRow[3][2], arraRow[3][3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n      currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n      currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n      currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Рух в ліво.\n}\n\nconst game2048 = new Game();\n\nbuttonOfStart.addEventListener(\"click\", () => {\n  game2048.start();\n});\n\ndocument.addEventListener(\"keydown\", (ewent) => {\n  switch (ewent.key) {\n    case \"ArrowUp\":\n      game2048.moveUp();\n      break;\n\n    case \"ArrowDown\":\n      game2048.moveDown();\n      break;\n\n    case \"ArrowRight\":\n      game2048.moveRight();\n      break;\n\n    case \"ArrowLeft\":\n      game2048.moveLeft();\n      break;\n  }\n});\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$tbody","document","querySelector","$a5fd07fa01589658$var$buttonOfStart","$a5fd07fa01589658$var$arrayTr","Array","from","children","$a5fd07fa01589658$var$game2048","constructor","ss","board","createEmptyBoard","score","status","start","deleteMessage","clearBoard","restart","addSCore","spawnTile","updateBoardFromDOM","messageStart","message","classList","remove","textContent","randomNumber","Math","floor","random","randomTwoOrForth","arraytr","canAddNewElement","array","some","td","randomTd","finish","contains","add","forEach","tr","indexTr","indexTd","cells","querySelectorAll","cell","className","removeAttribute","button","messageConT","style","fontSize","getScore","getStatus","addColor","canContinueGame","columns","row","push","columnMerge","column","newColumn","filter","item","newColumnLength","length","y","rows","i","rowsMerge","newRow","newRowLength","includes","gameScore","getMessage","getMessageWin","messageWin","moveUp","oldBoard","JSON","stringify","column1","column2","column3","column4","mergeColumn","merged","result","newColumn1","newColumn2","newColumn3","newColumn4","arrayFromTr","currentTr","moveDown","unshift","moveRight","arraRow","map","moveLeft","addEventListener","ewent","key"],"version":3,"file":"index.791f1482.js.map"}
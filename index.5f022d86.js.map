{"mappings":"ACIA,IAAM,EACA,EACA,EA2qBA,EA7qBA,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAgB,SAAS,aAAa,CAAC,UACvC,EAAU,MAAM,IAAI,CAAC,EAAM,QAAQ,EA2qBnC,EAAW,GAvqBX,WAAA,EAAD,CAAA,eEC+B,EFD9B,SAAA,EACQ,CAAE,E,IGXe,EAAK,E,E,I,CHU9B,AAAA,CAAA,SCVqB,CAAQ,CAAE,CAAW,EAC5C,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,CDQM,EAAA,IAAA,CAAA,GGVyB,EH6E7B,qBG7EkC,EH6Eb,WACnB,MAAM,IAAI,CAAC,EAAM,QAAQ,EAAE,OAAO,CAAC,SAAC,CAAA,CAAI,CAAxC,EACE,MAAM,IAAI,CAAC,EAAG,QAAQ,EAAE,OAAO,CAAC,SAAC,CAAA,CAAI,CAArC,EACE,EAAK,KAAK,CAAC,EAAQ,CAAC,EAAQ,CAC1B,AAAmB,KAAnB,EAAG,WAAW,CAAU,EAAI,EAAG,WAAW,AAC9C,EACF,EACF,EGnFM,KH4EN,IAAA,CG3EM,OAAO,cAAc,CH2E3B,IAAA,CG3EiC,EAAK,CAAE,MAAO,EAAO,WAAY,CAAA,EAAM,aAAc,CAAA,EAAM,SAAU,CAAA,CAAK,GAClG,AH0ET,IAAA,AG1EY,CAAC,EAAI,CAAG,EHSlB,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,gBAAgB,GAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,S,CAJZ,OEC8B,EFD9B,C,CAOJ,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,OAAO,GACZ,IAAI,CAAC,QAAQ,GAEb,IAAI,CAAC,SAAS,GACd,IAAI,CAAC,SAAS,GACd,IAAI,CAAC,kBAAkB,EACzB,C,E,CAEA,IAAA,gBAAA,MAAA,WAEE,IAAM,EAAe,AADL,SAAS,aAAa,CAAC,sBACV,QAAQ,CAAC,EAAE,CAExC,EAAa,SAAS,CAAC,MAAM,CAAC,gBAC9B,EAAa,SAAS,CAAC,MAAM,CAAC,eAC9B,EAAa,SAAS,CAAC,MAAM,CAAC,WAE9B,EAAa,WAAW,CAAG,EAC7B,C,E,CAEA,IAAA,YAAA,MAAA,WACE,IAAM,EAAe,WAAM,OAAA,KAAK,KAAK,CAAC,AAAgB,EAAhB,KAAK,MAAM,G,EAE3C,EAAU,MAAM,IAAI,CAAC,EAAM,QAAQ,EACrC,EAAmB,CAAA,EAElB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,MAAM,IAAI,CAAC,EAAM,QAAQ,EAAE,IAAI,CAAC,SAAC,CAArC,EAA4C,MAAA,AAAmB,KAAnB,EAAG,WAAW,AAAU,GAAA,CAClE,EAAmB,CAAA,EACnB,KACF,C,C,C,M,E,CAJG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOL,GAAI,EAIF,IAFA,IADI,EACA,EAAS,CAAA,EAEN,CAAC,GAGD,AAFL,CAAA,EAAW,CAAO,CAAC,IAAe,CAAC,QAAQ,CAAC,IAAe,AAAf,EAE9B,SAAS,CAAC,QAAQ,CAAC,WAC/B,EAAS,WAAW,CAnBM,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAoBpD,EAAS,SAAS,CAAC,GAAG,CAAC,SAEO,GAA1B,CAAC,EAAS,WAAW,EACvB,EAAS,SAAS,CAAC,GAAG,CAAC,iBAGK,GAA1B,CAAC,EAAS,WAAW,EACvB,EAAS,SAAS,CAAC,GAAG,CAAC,iBAGzB,EAAS,CAAA,EAIjB,C,E,CAWA,IAAA,aAAA,MAAA,WAGE,AAFc,EAAM,gBAAgB,CAAC,MAE/B,OAAO,CAAC,SAAC,CAAf,EACE,EAAK,WAAW,CAAG,GACnB,EAAK,SAAS,CAAG,aACjB,EAAK,eAAe,CAAC,QACvB,EACF,C,E,CAEA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,gBAAgB,GAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,UAEd,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAc,SAAS,aAAa,CAAC,qBAEvC,AAAuB,CAAA,UAAvB,EAAO,WAAW,EACpB,EAAO,KAAK,CAAC,QAAQ,CAAG,OACxB,EAAO,WAAW,CAAG,UACrB,EAAO,SAAS,CAAC,GAAG,CAAC,aAErB,EAAO,KAAK,CAAC,QAAQ,CAAG,OACxB,EAAO,WAAW,CAAG,QACrB,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,SAAS,CAAC,GAAG,CAAC,SAErB,EAAY,QAAQ,CAAC,EAAE,CAAC,WAAW,CACjC,0CACF,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,iBACtC,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,YAGxC,IAAI,CAAC,aAAa,EACpB,C,E,CAEA,IAAA,mBAAA,MAAA,WACE,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AACH,C,E,CAEA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAEA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAEA,IAAA,WAAA,MAAA,WACE,MAAM,IAAI,CAAC,EAAM,QAAQ,EAAE,OAAO,CAAC,SAAC,CAApC,EACE,MAAM,IAAI,CAAC,EAAG,QAAQ,EAAE,OAAO,CAAC,SAAC,CAAjC,EAGE,OAAQ,CAFU,EAAG,WAAW,EAG9B,KAAK,EACH,EAAG,SAAS,CAAC,GAAG,CAAC,iBACjB,KAEF,MAAK,EACH,EAAG,SAAS,CAAC,GAAG,CAAC,iBACjB,KAEF,MAAK,EACH,EAAG,SAAS,CAAC,GAAG,CAAC,iBACjB,KAEF,MAAK,GACH,EAAG,SAAS,CAAC,GAAG,CAAC,kBACjB,KAEF,MAAK,GACH,EAAG,SAAS,CAAC,GAAG,CAAC,kBACjB,KAEF,MAAK,GACH,EAAG,SAAS,CAAC,GAAG,CAAC,kBACjB,KAEF,MAAK,IACH,EAAG,SAAS,CAAC,GAAG,CAAC,mBACjB,KAEF,MAAK,IACH,EAAG,SAAS,CAAC,GAAG,CAAC,mBACjB,KAEF,MAAK,IACH,EAAG,SAAS,CAAC,GAAG,CAAC,mBACjB,KAEF,MAAK,KACH,EAAG,SAAS,CAAC,GAAG,CAAC,oBACjB,KAEF,MAAK,KACH,EAAG,SAAS,CAAC,GAAG,CAAC,mBAErB,CACF,EACF,EACF,C,E,CAEA,IAAA,kBAAA,MAAA,WACE,IAAM,EAAU,CAAC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CAGhC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAApB,EACE,CAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACtB,CAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACtB,CAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACtB,CAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,CACxB,GAkBK,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAyB,CAAzB,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAhBc,SAAC,CAArB,EAKE,IAJA,IAAM,EAAY,EAAO,MAAM,CAAC,SAAC,CAAjC,EAA0C,OAAA,AAAS,IAAT,C,GACpC,EAAkB,EAAU,MAAM,CACpC,EAAI,EAED,EAAI,GAAiB,CAC1B,GAAI,CAAS,CAAC,EAAE,GAAK,CAAS,CAAC,EAAI,EAAE,CACnC,MAAO,CAAA,CAGT,CAAA,GACF,CACF,EAIkB,GACd,MAAO,CAAA,CAEX,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,IAAM,EAAO,CAAC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CAE7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAAA,CAAK,CAAzB,EACE,CAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,CAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,CAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,CAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAG,CAAC,EAAE,CACrB,GAiBK,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAmB,CAAnB,IAAM,EAAN,EAAA,KAAA,CACH,GAAI,AAfY,SAAC,CAAnB,EAKE,IAJA,IAAM,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAoC,OAAA,AAAS,IAAT,C,GAC9B,EAAe,EAAO,MAAM,CAC9B,EAAI,EAED,EAAI,GAAc,CACvB,GAAI,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,CAC7B,MAAO,CAAA,CAGT,CAAA,GACF,CACF,EAGgB,GACZ,MAAO,CAAA,CAEX,C,C,M,E,CAJK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOA,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,IAAI,CAAC,KAAK,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EACH,GAAI,AADD,EAAA,KAAA,CACK,QAAQ,CAAC,GACf,MAAO,CAAA,C,C,M,E,CAFN,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAQL,MAAO,CAAA,CACT,C,E,CAEA,IAAA,WAAA,MAAA,WAGE,AAFkB,SAAS,aAAa,CAAC,eAE/B,WAAW,CAAG,IAAI,CAAC,KAAK,AACpC,C,E,CAEA,IAAA,aAAA,MAAA,WACE,IAAM,EAAc,SAAS,aAAa,CAAC,qBAE3C,CAAA,EAAY,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAG,EAAY,QAAQ,CAAC,EAAE,CAAC,WAAW,CACzE,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,gBACtC,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UACxC,C,E,CAEA,IAAA,gBAAA,MAAA,WACE,IAAM,EAAc,SAAS,aAAa,CAAC,sBACrC,EAAa,SAAS,aAAa,CAAC,eAE1C,CAAA,EAAY,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAG,EAAW,WAAW,CAC5D,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,eACtC,EAAY,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UACxC,C,E,CAEA,IAAA,SAAA,MAAA,W,I,E,I,CACE,GAAI,CAAC,IAAI,CAAC,eAAe,GAAI,CAC3B,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAG,WAEd,MACF,CAEA,IAAM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAEpC,EAAU,EAAE,CACZ,EAAU,EAAE,CACZ,EAAU,EAAE,CACZ,EAAU,EAAE,CAElB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAApB,EACE,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,CACrB,GAEA,IAAM,EAAc,SAAC,CAArB,EAKE,IAJA,IAAM,EAAS,EAAO,MAAM,CAAC,SAAC,CAA9B,EAAuC,OAAA,AAAS,IAAT,C,GACjC,EAAS,EAAE,CACb,EAAI,EAED,EAAI,EAAO,MAAM,EAClB,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAO,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACrB,EAAK,KAAK,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CACvB,GAAK,IAEL,EAAO,IAAI,CAAC,CAAM,CAAC,EAAE,EACrB,KAIJ,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,EAEM,EAAa,EAAY,GACzB,EAAa,EAAY,GACzB,EAAa,EAAY,GACzB,EAAa,EAAY,EAE/B,CAAA,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC7D,CAED,IAAI,CAAC,UAAU,GAIf,IAAK,IAFC,EAAc,MAAM,IAAI,CAAC,EAAM,QAAQ,EAEpC,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAY,CAAW,CAAC,EAAE,CAAC,QAAQ,AAEzC,CAAA,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CAElC,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAE/B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,IAAI,CAAC,SAAS,GAGhB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,GAEG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAAjC,EAAyC,OAAA,EAAI,QAAQ,CAAC,K,IAGpD,IAAI,CAAC,aAAa,GAGpB,IAAI,CAAC,kBAAkB,EACzB,C,E,CAEA,IAAA,WAAA,MAAA,W,I,E,I,CACQ,EAAU,EAAE,CACZ,EAAU,EAAE,CACZ,EAAU,EAAE,CACZ,EAAU,EAAE,CAGlB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAApB,EACE,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,EACnB,EAAQ,IAAI,CAAC,CAAG,CAAC,EAAE,CACrB,GAEA,IAAM,EAAc,SAAC,CAArB,EAOE,IALA,IAAM,EAAS,EAAO,MAAM,CAAC,SAAC,CAA9B,EAAuC,OAAA,AAAS,IAAT,C,GACjC,EAAS,EAAE,CACb,EAAI,EAGD,EAAI,EAAO,MAAM,EAClB,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAO,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACrB,EAAK,KAAK,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CACvB,GAAK,IAEL,EAAO,IAAI,CAAC,CAAM,CAAC,EAAE,EACrB,KAKJ,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGjB,OAAO,CACT,EAEM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAGpC,EAAa,EAAY,GACzB,EAAa,EAAY,GACzB,EAAa,EAAY,GACzB,EAAa,EAAY,EAE/B,CAAA,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAE,CAAU,CAAC,EAAE,CAAC,CAC7D,CAGD,IAAI,CAAC,UAAU,GAKf,IAAK,IAFC,EAAc,MAAM,IAAI,CAAC,EAAM,QAAQ,EAEpC,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAY,CAAW,CAAC,EAAE,CAAC,QAAQ,AAEzC,CAAA,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAU,CAAC,EAAE,CAAS,GAAK,CAAU,CAAC,EAAE,CAElC,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAE/B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,IAAI,CAAC,SAAS,GAGhB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,GAEG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAAjC,EAAyC,OAAA,EAAI,QAAQ,CAAC,K,IAGpD,IAAI,CAAC,aAAa,GAIpB,IAAI,CAAC,kBAAkB,EACzB,C,E,CAEA,IAAA,YAAA,MAAA,W,I,E,I,CACE,GAAI,CAAC,IAAI,CAAC,eAAe,GAAI,CAC3B,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,MAAM,CAAG,WAEd,MACF,CAEA,IAAM,EAAc,SAAC,CAArB,EAME,IALA,IAAM,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAoC,OAAA,AAAS,IAAT,C,GAC9B,EAAS,EAAE,CACb,EAAI,EAGD,EAAI,EAAO,MAAM,EAClB,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAO,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACrB,EAAK,KAAK,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CACvB,GAAK,IAEL,EAAO,IAAI,CAAC,CAAM,CAAC,EAAE,EACrB,KAKJ,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,OAAO,CAAC,GAGjB,OAAO,CACT,EAEM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAIpC,EAAU,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAAhC,EAAwC,OAAA,EAAY,E,EAEpD,CAAA,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC7D,CAGD,IAAI,CAAC,UAAU,GAKf,IAAK,IAFC,EAAc,MAAM,IAAI,CAAC,EAAM,QAAQ,EAEpC,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAY,CAAW,CAAC,EAAE,CAAC,QAAQ,AAEzC,CAAA,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CAElC,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAE/B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,IAAI,CAAC,SAAS,GAGhB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,GAEG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAAjC,EAAyC,OAAA,EAAI,QAAQ,CAAC,K,IAGpD,IAAI,CAAC,aAAa,GAIpB,IAAI,CAAC,kBAAkB,EACzB,C,E,CAEA,IAAA,WAAA,MAAA,W,I,E,I,CACQ,EAAc,SAAC,CAArB,EAME,IALA,IAAM,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAoC,OAAA,AAAS,IAAT,C,GAC9B,EAAS,EAAE,CACb,EAAI,EAGD,EAAI,EAAO,MAAM,EAClB,EAAI,EAAO,MAAM,CAAG,GAAK,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,EACtD,EAAO,IAAI,CAAC,AAAY,EAAZ,CAAM,CAAC,EAAE,EACrB,EAAK,KAAK,EAAI,AAAY,EAAZ,CAAM,CAAC,EAAE,CACvB,GAAK,IAEL,EAAO,IAAI,CAAC,CAAM,CAAC,EAAE,EACrB,KAKJ,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,EAEM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAIpC,EAAU,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAAhC,EAAwC,OAAA,EAAY,E,EAEpD,CAAA,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D,CAAC,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAE,CAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAC7D,CAGD,IAAI,CAAC,UAAU,GAKf,IAAK,IAFC,EAAc,MAAM,IAAI,CAAC,EAAM,QAAQ,EAEpC,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CAC3C,IAAM,EAAY,CAAW,CAAC,EAAE,CAAC,QAAQ,AAEzC,CAAA,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CACnE,CAAS,CAAC,EAAE,CAAC,WAAW,CAAG,AAAkB,IAAlB,CAAO,CAAC,EAAE,CAAC,EAAE,CAAS,GAAK,CAAO,CAAC,EAAE,CAAC,EAAE,CAElC,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAGI,KAA7B,CAAS,CAAC,EAAE,CAAC,WAAW,EAC1B,CAAS,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAE/B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,IAAI,CAAC,SAAS,GAGhB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,GAEG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAAjC,EAAyC,OAAA,EAAI,QAAQ,CAAC,K,IAGpD,IAAI,CAAC,aAAa,GAIpB,IAAI,CAAC,kBAAkB,EACzB,C,E,CElqBkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFFhC,EEE4C,SAAS,CAAE,GFFvD,C,G,EAyqBN,EAAc,gBAAgB,CAAC,QAAS,WACtC,EAAS,KAAK,EAChB,GAEA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACE,OAAQ,EAAM,GAAG,EACf,IAAK,UACH,EAAS,MAAM,GACf,KAEF,KAAK,YACH,EAAS,QAAQ,GACjB,KAEF,KAAK,aACH,EAAS,SAAS,GAClB,KAEF,KAAK,YACH,EAAS,QAAQ,EAErB,CACF","sources":["<anon>","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\"use strict\";\n/* ========================================== */ var $3d28d7f1aac198f5$var$tbody = document.querySelector(\"tbody\");\nvar $3d28d7f1aac198f5$var$buttonOfStart = document.querySelector(\"button\");\nvar $3d28d7f1aac198f5$var$arrayTr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n/* ===================================================== */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(ss) {\n        var _this = this;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"updateBoardFromDOM\", function() {\n            Array.from($3d28d7f1aac198f5$var$tbody.children).forEach(function(tr, indexTr) {\n                Array.from(tr.children).forEach(function(td, indexTd) {\n                    _this.board[indexTr][indexTd] = td.textContent === \"\" ? 0 : td.textContent;\n                });\n            });\n        }) // Перезапускає поле.\n        ;\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\"; // або 'finished' (гра завершена)\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"start\",\n            value: function start() {\n                this.deleteMessage();\n                this.clearBoard();\n                this.restart();\n                this.addSCore();\n                this.spawnTile();\n                this.spawnTile();\n                this.updateBoardFromDOM();\n            }\n        },\n        {\n            key: \"deleteMessage\",\n            value: function deleteMessage() {\n                var message = document.querySelector(\".message-container\");\n                var messageStart = message.children[2];\n                messageStart.classList.remove(\"message-lose\");\n                messageStart.classList.remove(\"message-win\");\n                messageStart.classList.remove(\"message\");\n                messageStart.textContent = \"\";\n            }\n        },\n        {\n            key: \"spawnTile\",\n            value: function spawnTile() {\n                var randomNumber = function() {\n                    return Math.floor(Math.random() * 4);\n                };\n                var randomTwoOrForth = function() {\n                    return Math.random() < 0.1 ? 4 : 2;\n                };\n                var arraytr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n                var canAddNewElement = false;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = arraytr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var array = _step.value;\n                        if (Array.from(array.children).some(function(td) {\n                            return td.textContent === \"\";\n                        })) {\n                            canAddNewElement = true;\n                            break; // Зупиняємо цикл, якщо знайшли порожню клітинку\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (canAddNewElement) {\n                    var randomTd;\n                    var finish = false;\n                    while(!finish){\n                        randomTd = $3d28d7f1aac198f5$var$arrayTr[randomNumber()].children[randomNumber()];\n                        if (!randomTd.classList.contains(\"activ\")) {\n                            randomTd.textContent = randomTwoOrForth();\n                            randomTd.classList.add(\"activ\");\n                            if (+randomTd.textContent === 2) randomTd.classList.add(\"field-cell--2\");\n                            if (+randomTd.textContent === 4) randomTd.classList.add(\"field-cell--4\");\n                            finish = true; // Зупиняємо цикл, коли плитка додана\n                        }\n                    }\n                }\n            } // Додає випадкову плитку.\n        },\n        {\n            key: \"clearBoard\",\n            value: function clearBoard() {\n                var cells = $3d28d7f1aac198f5$var$tbody.querySelectorAll(\"td\");\n                cells.forEach(function(cell) {\n                    cell.textContent = \"\";\n                    cell.className = \"field-cell\";\n                    cell.removeAttribute(\"style\");\n                });\n            } // Очищає поле гри.\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"playing\";\n                var button = document.querySelector(\".button\");\n                var messageConT = document.querySelector(\".message-container\");\n                if (button.textContent === \"Start\") {\n                    button.style.fontSize = \"18px\";\n                    button.textContent = \"Restart\";\n                    button.classList.add(\"restart\");\n                } else {\n                    button.style.fontSize = \"18px\";\n                    button.textContent = \"Start\";\n                    button.classList.remove(\"restart\");\n                    button.classList.add(\"start\");\n                    messageConT.children[2].textContent = 'Press \"Start\" to begin game. Good luck!';\n                    messageConT.children[2].classList.add(\"message-start\");\n                    messageConT.children[2].classList.add(\"message\");\n                }\n                this.deleteMessage();\n            } // Перезапускає гру, обнуляючи рахунки.\n        },\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                return [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n            } // Створює поле гри.\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            } // Повертає Score.\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            } // Повертає Status.\n        },\n        {\n            key: \"addColor\",\n            value: function addColor() {\n                Array.from($3d28d7f1aac198f5$var$tbody.children).forEach(function(tr) {\n                    Array.from(tr.children).forEach(function(td) {\n                        var tdContent = td.textContent;\n                        switch(+tdContent){\n                            case 2:\n                                td.classList.add(\"field-cell--2\");\n                                break;\n                            case 4:\n                                td.classList.add(\"field-cell--4\");\n                                break;\n                            case 8:\n                                td.classList.add(\"field-cell--8\");\n                                break;\n                            case 16:\n                                td.classList.add(\"field-cell--16\");\n                                break;\n                            case 32:\n                                td.classList.add(\"field-cell--32\");\n                                break;\n                            case 64:\n                                td.classList.add(\"field-cell--64\");\n                                break;\n                            case 128:\n                                td.classList.add(\"field-cell--128\");\n                                break;\n                            case 256:\n                                td.classList.add(\"field-cell--256\");\n                                break;\n                            case 512:\n                                td.classList.add(\"field-cell--512\");\n                                break;\n                            case 1024:\n                                td.classList.add(\"field-cell--1024\");\n                                break;\n                            case 2048:\n                                td.classList.add(\"field-cell--2048\");\n                                break;\n                        }\n                    });\n                });\n            } // Різні кольори до плиток на основі їх значень.\n        },\n        {\n            key: \"canContinueGame\",\n            value: function canContinueGame() {\n                var columns = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                // Перетворюємо стовпці в масиви\n                this.board.forEach(function(row) {\n                    columns[0].push(row[0]);\n                    columns[1].push(row[1]);\n                    columns[2].push(row[2]);\n                    columns[3].push(row[3]);\n                });\n                // Перевірка на склеювання комірок стовпців.\n                var columnMerge = function(column) {\n                    var newColumn = column.filter(function(item) {\n                        return item !== 0;\n                    });\n                    var newColumnLength = newColumn.length;\n                    var y = 0;\n                    while(y < newColumnLength){\n                        if (newColumn[y] === newColumn[y + 1]) return true;\n                        y++;\n                    }\n                };\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    // Обробляємо кожен стовпець\n                    for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var column = _step.value;\n                        if (columnMerge(column)) return true; // Якщо хоча б в одному стовпці є злиття\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                // =============================================\n                var rows = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                this.board.forEach(function(row, i) {\n                    rows[i].push(row[0]);\n                    rows[i].push(row[1]);\n                    rows[i].push(row[2]);\n                    rows[i].push(row[3]);\n                });\n                // Перевірка на склеювання комірок рядків.\n                var rowsMerge = function(row) {\n                    var newRow = row.filter(function(item) {\n                        return item !== 0;\n                    });\n                    var newRowLength = newRow.length;\n                    var y = 0;\n                    while(y < newRowLength){\n                        if (newRow[y] === newRow[y + 1]) return true;\n                        y++;\n                    }\n                };\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator1 = rows[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var row = _step1.value;\n                        if (rowsMerge(row)) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;\n                try {\n                    // Перевірка на порожні комірки.\n                    for(var _iterator2 = this.board[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n                        var row1 = _step2.value;\n                        if (row1.includes(0)) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                            _iterator2.return();\n                        }\n                    } finally{\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n                // Перевірка на рух.\n                return false;\n            }\n        },\n        {\n            key: \"addSCore\",\n            value: function addSCore() {\n                var gameScore = document.querySelector(\".game-score\");\n                gameScore.textContent = this.score;\n            }\n        },\n        {\n            key: \"getMessage\",\n            value: function getMessage() {\n                var messageConT = document.querySelector(\".message-container\");\n                messageConT.children[2].textContent = messageConT.children[0].textContent;\n                messageConT.children[2].classList.add(\"message-lose\");\n                messageConT.children[2].classList.add(\"message\");\n            }\n        },\n        {\n            key: \"getMessageWin\",\n            value: function getMessageWin() {\n                var messageConT = document.querySelector(\".message-container\");\n                var messageWin = document.querySelector(\".message-win\");\n                messageConT.children[2].textContent = messageWin.textContent;\n                messageConT.children[2].classList.add(\"message-win\");\n                messageConT.children[2].classList.add(\"message\");\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                if (!this.canContinueGame()) {\n                    this.getMessage();\n                    this.status = \"finished\";\n                    return;\n                }\n                var oldBoard = JSON.stringify(this.board);\n                var column1 = [];\n                var column2 = [];\n                var column3 = [];\n                var column4 = [];\n                this.board.forEach(function(row) {\n                    column1.push(row[0]);\n                    column2.push(row[1]);\n                    column3.push(row[2]);\n                    column4.push(row[3]);\n                });\n                var mergeColumn = function(column) {\n                    var merged = column.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var result = [];\n                    var i = 0;\n                    while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                        result.push(merged[i] * 2);\n                        _this.score += merged[i] * 2;\n                        i += 2;\n                    } else {\n                        result.push(merged[i]);\n                        i++;\n                    }\n                    while(result.length < 4)result.push(0);\n                    return result;\n                };\n                var newColumn1 = mergeColumn(column1);\n                var newColumn2 = mergeColumn(column2);\n                var newColumn3 = mergeColumn(column3);\n                var newColumn4 = mergeColumn(column4);\n                this.board = [\n                    [\n                        newColumn1[0],\n                        newColumn2[0],\n                        newColumn3[0],\n                        newColumn4[0]\n                    ],\n                    [\n                        newColumn1[1],\n                        newColumn2[1],\n                        newColumn3[1],\n                        newColumn4[1]\n                    ],\n                    [\n                        newColumn1[2],\n                        newColumn2[2],\n                        newColumn3[2],\n                        newColumn4[2]\n                    ],\n                    [\n                        newColumn1[3],\n                        newColumn2[3],\n                        newColumn3[3],\n                        newColumn4[3]\n                    ]\n                ];\n                this.clearBoard();\n                var arrayFromTr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n                for(var i = 0; i < arrayFromTr.length; i++){\n                    var currentTr = arrayFromTr[i].children;\n                    currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n                    currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n                    currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n                    currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n                    if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n                    if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n                    if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n                    if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n                }\n                var newBoard = JSON.stringify(this.board);\n                if (oldBoard !== newBoard) this.spawnTile();\n                this.addColor();\n                this.addSCore();\n                var has2048 = this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (has2048) this.getMessageWin();\n                this.updateBoardFromDOM();\n            } // Рух в верх.\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var column1 = [];\n                var column2 = [];\n                var column3 = [];\n                var column4 = [];\n                // Перетворюємо стовпці в масиви\n                this.board.forEach(function(row) {\n                    column1.push(row[0]);\n                    column2.push(row[1]);\n                    column3.push(row[2]);\n                    column4.push(row[3]);\n                });\n                var mergeColumn = function(column) {\n                    // Спочатку фільтруємо нулі\n                    var merged = column.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var result = [];\n                    var i = 0;\n                    // Злиття плиток\n                    while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                        result.push(merged[i] * 2); // Подвоїти плитки\n                        _this.score += merged[i] * 2; // Додаємо до рахунку\n                        i += 2; // Пропускаємо наступну плитку після злиття\n                    } else {\n                        result.push(merged[i]); // Якщо плитки не однакові\n                        i++;\n                    }\n                    // Переміщуємо плитки вниз, щоб не було проміжків\n                    while(result.length < 4)result.unshift(0);\n                    return result;\n                };\n                var oldBoard = JSON.stringify(this.board);\n                // Обробляємо кожен стовпець\n                var newColumn1 = mergeColumn(column1);\n                var newColumn2 = mergeColumn(column2);\n                var newColumn3 = mergeColumn(column3);\n                var newColumn4 = mergeColumn(column4);\n                this.board = [\n                    [\n                        newColumn1[0],\n                        newColumn2[0],\n                        newColumn3[0],\n                        newColumn4[0]\n                    ],\n                    [\n                        newColumn1[1],\n                        newColumn2[1],\n                        newColumn3[1],\n                        newColumn4[1]\n                    ],\n                    [\n                        newColumn1[2],\n                        newColumn2[2],\n                        newColumn3[2],\n                        newColumn4[2]\n                    ],\n                    [\n                        newColumn1[3],\n                        newColumn2[3],\n                        newColumn3[3],\n                        newColumn4[3]\n                    ]\n                ];\n                // Очищаємо дошку\n                this.clearBoard();\n                // Оновлення значень на сторінці\n                var arrayFromTr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n                for(var i = 0; i < arrayFromTr.length; i++){\n                    var currentTr = arrayFromTr[i].children;\n                    currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n                    currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n                    currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n                    currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n                    if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n                    if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n                    if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n                    if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n                }\n                var newBoard = JSON.stringify(this.board);\n                if (oldBoard !== newBoard) this.spawnTile();\n                this.addColor();\n                this.addSCore();\n                var has2048 = this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (has2048) this.getMessageWin();\n                // Оновлюємо дошку\n                this.updateBoardFromDOM();\n            } // Рух в вниз.\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (!this.canContinueGame()) {\n                    this.getMessage();\n                    this.status = \"finished\";\n                    return;\n                }\n                var mergeColumn = function(row) {\n                    var merged = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var result = [];\n                    var i = 0;\n                    // Злиття плиток\n                    while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                        result.push(merged[i] * 2); // Подвоїти плитки\n                        _this.score += merged[i] * 2; // Додаємо до рахунку\n                        i += 2; // Пропускаємо наступну плитку після злиття\n                    } else {\n                        result.push(merged[i]); // Якщо плитки не однакові\n                        i++;\n                    }\n                    // Переміщуємо плитки вправо, щоб не було проміжків\n                    while(result.length < 4)result.unshift(0);\n                    return result;\n                };\n                var oldBoard = JSON.stringify(this.board);\n                // Обробляємо кожен рядок\n                var arraRow = this.board.map(function(row) {\n                    return mergeColumn(row);\n                });\n                this.board = [\n                    [\n                        arraRow[0][0],\n                        arraRow[0][1],\n                        arraRow[0][2],\n                        arraRow[0][3]\n                    ],\n                    [\n                        arraRow[1][0],\n                        arraRow[1][1],\n                        arraRow[1][2],\n                        arraRow[1][3]\n                    ],\n                    [\n                        arraRow[2][0],\n                        arraRow[2][1],\n                        arraRow[2][2],\n                        arraRow[2][3]\n                    ],\n                    [\n                        arraRow[3][0],\n                        arraRow[3][1],\n                        arraRow[3][2],\n                        arraRow[3][3]\n                    ]\n                ];\n                // Очищаємо дошку\n                this.clearBoard();\n                // Оновлення значень на сторінці\n                var arrayFromTr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n                for(var i = 0; i < arrayFromTr.length; i++){\n                    var currentTr = arrayFromTr[i].children;\n                    currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n                    currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n                    currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n                    currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n                    if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n                    if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n                    if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n                    if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n                }\n                var newBoard = JSON.stringify(this.board);\n                if (oldBoard !== newBoard) this.spawnTile();\n                this.addColor();\n                this.addSCore();\n                var has2048 = this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (has2048) this.getMessageWin();\n                // Оновлюємо дошку\n                this.updateBoardFromDOM();\n            } // Тільки ровні пацани йдуть туди.\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var mergeColumn = function(row) {\n                    var merged = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var result = [];\n                    var i = 0;\n                    // Злиття плиток\n                    while(i < merged.length)if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n                        result.push(merged[i] * 2); // Подвоїти плитки\n                        _this.score += merged[i] * 2; // Додаємо до рахунку\n                        i += 2; // Пропускаємо наступну плитку після злиття\n                    } else {\n                        result.push(merged[i]); // Якщо плитки не однакові\n                        i++;\n                    }\n                    // Переміщуємо плитки вправо, щоб не було проміжків\n                    while(result.length < 4)result.push(0);\n                    return result;\n                };\n                var oldBoard = JSON.stringify(this.board);\n                // Обробляємо кожен рядок\n                var arraRow = this.board.map(function(row) {\n                    return mergeColumn(row);\n                });\n                this.board = [\n                    [\n                        arraRow[0][0],\n                        arraRow[0][1],\n                        arraRow[0][2],\n                        arraRow[0][3]\n                    ],\n                    [\n                        arraRow[1][0],\n                        arraRow[1][1],\n                        arraRow[1][2],\n                        arraRow[1][3]\n                    ],\n                    [\n                        arraRow[2][0],\n                        arraRow[2][1],\n                        arraRow[2][2],\n                        arraRow[2][3]\n                    ],\n                    [\n                        arraRow[3][0],\n                        arraRow[3][1],\n                        arraRow[3][2],\n                        arraRow[3][3]\n                    ]\n                ];\n                // Очищаємо дошку\n                this.clearBoard();\n                // Оновлення значень на сторінці\n                var arrayFromTr = Array.from($3d28d7f1aac198f5$var$tbody.children);\n                for(var i = 0; i < arrayFromTr.length; i++){\n                    var currentTr = arrayFromTr[i].children;\n                    currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n                    currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n                    currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n                    currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n                    if (currentTr[0].textContent !== \"\") currentTr[0].classList.add(\"activ\");\n                    if (currentTr[1].textContent !== \"\") currentTr[1].classList.add(\"activ\");\n                    if (currentTr[2].textContent !== \"\") currentTr[2].classList.add(\"activ\");\n                    if (currentTr[3].textContent !== \"\") currentTr[3].classList.add(\"activ\");\n                }\n                var newBoard = JSON.stringify(this.board);\n                if (oldBoard !== newBoard) this.spawnTile();\n                this.addColor();\n                this.addSCore();\n                var has2048 = this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (has2048) this.getMessageWin();\n                // Оновлюємо дошку\n                this.updateBoardFromDOM();\n            } // Рух в ліво.\n        }\n    ]);\n    return Game;\n}();\nvar $3d28d7f1aac198f5$var$game2048 = new $3d28d7f1aac198f5$var$Game();\n$3d28d7f1aac198f5$var$buttonOfStart.addEventListener(\"click\", function() {\n    $3d28d7f1aac198f5$var$game2048.start();\n});\ndocument.addEventListener(\"keydown\", function(ewent) {\n    switch(ewent.key){\n        case \"ArrowUp\":\n            $3d28d7f1aac198f5$var$game2048.moveUp();\n            break;\n        case \"ArrowDown\":\n            $3d28d7f1aac198f5$var$game2048.moveDown();\n            break;\n        case \"ArrowRight\":\n            $3d28d7f1aac198f5$var$game2048.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $3d28d7f1aac198f5$var$game2048.moveLeft();\n            break;\n    }\n});\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n})();\n//# sourceMappingURL=index.5f022d86.js.map\n","\"use strict\";\n\n/* ========================================== */\n\nconst tbody = document.querySelector(\"tbody\");\nconst buttonOfStart = document.querySelector(\"button\");\nconst arrayTr = Array.from(tbody.children);\n\n/* ===================================================== */\n\nclass Game {\n  constructor(ss) {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = \"playing\"; // або 'finished' (гра завершена)\n  }\n\n  start() {\n    this.deleteMessage();\n    this.clearBoard();\n    this.restart();\n    this.addSCore();\n\n    this.spawnTile();\n    this.spawnTile();\n    this.updateBoardFromDOM();\n  }\n\n  deleteMessage() {\n    const message = document.querySelector(\".message-container\");\n    const messageStart = message.children[2];\n\n    messageStart.classList.remove(\"message-lose\");\n    messageStart.classList.remove(\"message-win\");\n    messageStart.classList.remove(\"message\");\n\n    messageStart.textContent = \"\";\n  }\n\n  spawnTile() {\n    const randomNumber = () => Math.floor(Math.random() * 4);\n    const randomTwoOrForth = () => (Math.random() < 0.1 ? 4 : 2);\n    const arraytr = Array.from(tbody.children);\n    let canAddNewElement = false;\n\n    for (const array of arraytr) {\n      if (Array.from(array.children).some((td) => td.textContent === \"\")) {\n        canAddNewElement = true;\n        break; // Зупиняємо цикл, якщо знайшли порожню клітинку\n      }\n    }\n\n    if (canAddNewElement) {\n      let randomTd;\n      let finish = false;\n\n      while (!finish) {\n        randomTd = arrayTr[randomNumber()].children[randomNumber()];\n\n        if (!randomTd.classList.contains(\"activ\")) {\n          randomTd.textContent = randomTwoOrForth();\n          randomTd.classList.add(\"activ\");\n\n          if (+randomTd.textContent === 2) {\n            randomTd.classList.add(\"field-cell--2\");\n          }\n\n          if (+randomTd.textContent === 4) {\n            randomTd.classList.add(\"field-cell--4\");\n          }\n\n          finish = true; // Зупиняємо цикл, коли плитка додана\n        }\n      }\n    }\n  } // Додає випадкову плитку.\n\n  updateBoardFromDOM = () => {\n    Array.from(tbody.children).forEach((tr, indexTr) => {\n      Array.from(tr.children).forEach((td, indexTd) => {\n        this.board[indexTr][indexTd] =\n          td.textContent === \"\" ? 0 : td.textContent;\n      });\n    });\n  }; // Перезапускає поле.\n\n  clearBoard() {\n    const cells = tbody.querySelectorAll(\"td\");\n\n    cells.forEach((cell) => {\n      cell.textContent = \"\";\n      cell.className = \"field-cell\";\n      cell.removeAttribute(\"style\");\n    });\n  } // Очищає поле гри.\n\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = \"playing\";\n\n    const button = document.querySelector(\".button\");\n    const messageConT = document.querySelector(\".message-container\");\n\n    if (button.textContent === \"Start\") {\n      button.style.fontSize = \"18px\";\n      button.textContent = \"Restart\";\n      button.classList.add(\"restart\");\n    } else {\n      button.style.fontSize = \"18px\";\n      button.textContent = \"Start\";\n      button.classList.remove(\"restart\");\n      button.classList.add(\"start\");\n\n      messageConT.children[2].textContent =\n        'Press \"Start\" to begin game. Good luck!';\n      messageConT.children[2].classList.add(\"message-start\");\n      messageConT.children[2].classList.add(\"message\");\n    }\n\n    this.deleteMessage();\n  } // Перезапускає гру, обнуляючи рахунки.\n\n  createEmptyBoard() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  } // Створює поле гри.\n\n  getScore() {\n    return this.score;\n  } // Повертає Score.\n\n  getStatus() {\n    return this.status;\n  } // Повертає Status.\n\n  addColor() {\n    Array.from(tbody.children).forEach((tr) => {\n      Array.from(tr.children).forEach((td) => {\n        const tdContent = td.textContent;\n\n        switch (+tdContent) {\n          case 2:\n            td.classList.add(\"field-cell--2\");\n            break;\n\n          case 4:\n            td.classList.add(\"field-cell--4\");\n            break;\n\n          case 8:\n            td.classList.add(\"field-cell--8\");\n            break;\n\n          case 16:\n            td.classList.add(\"field-cell--16\");\n            break;\n\n          case 32:\n            td.classList.add(\"field-cell--32\");\n            break;\n\n          case 64:\n            td.classList.add(\"field-cell--64\");\n            break;\n\n          case 128:\n            td.classList.add(\"field-cell--128\");\n            break;\n\n          case 256:\n            td.classList.add(\"field-cell--256\");\n            break;\n\n          case 512:\n            td.classList.add(\"field-cell--512\");\n            break;\n\n          case 1024:\n            td.classList.add(\"field-cell--1024\");\n            break;\n\n          case 2048:\n            td.classList.add(\"field-cell--2048\");\n            break;\n        }\n      });\n    });\n  } // Різні кольори до плиток на основі їх значень.\n\n  canContinueGame() {\n    const columns = [[], [], [], []];\n\n    // Перетворюємо стовпці в масиви\n    this.board.forEach((row) => {\n      columns[0].push(row[0]);\n      columns[1].push(row[1]);\n      columns[2].push(row[2]);\n      columns[3].push(row[3]);\n    });\n\n    // Перевірка на склеювання комірок стовпців.\n    const columnMerge = (column) => {\n      const newColumn = column.filter((item) => item !== 0);\n      const newColumnLength = newColumn.length;\n      let y = 0;\n\n      while (y < newColumnLength) {\n        if (newColumn[y] === newColumn[y + 1]) {\n          return true;\n        }\n\n        y++;\n      }\n    };\n\n    // Обробляємо кожен стовпець\n    for (const column of columns) {\n      if (columnMerge(column)) {\n        return true; // Якщо хоча б в одному стовпці є злиття\n      }\n    }\n\n    // =============================================\n\n    const rows = [[], [], [], []];\n\n    this.board.forEach((row, i) => {\n      rows[i].push(row[0]);\n      rows[i].push(row[1]);\n      rows[i].push(row[2]);\n      rows[i].push(row[3]);\n    });\n\n    // Перевірка на склеювання комірок рядків.\n    const rowsMerge = (row) => {\n      const newRow = row.filter((item) => item !== 0);\n      const newRowLength = newRow.length;\n      let y = 0;\n\n      while (y < newRowLength) {\n        if (newRow[y] === newRow[y + 1]) {\n          return true;\n        }\n\n        y++;\n      }\n    };\n\n    for (const row of rows) {\n      if (rowsMerge(row)) {\n        return true;\n      }\n    }\n\n    // Перевірка на порожні комірки.\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        return true;\n      }\n    }\n\n    // Перевірка на рух.\n\n    return false;\n  }\n\n  addSCore() {\n    const gameScore = document.querySelector(\".game-score\");\n\n    gameScore.textContent = this.score;\n  }\n\n  getMessage() {\n    const messageConT = document.querySelector(\".message-container\");\n\n    messageConT.children[2].textContent = messageConT.children[0].textContent;\n    messageConT.children[2].classList.add(\"message-lose\");\n    messageConT.children[2].classList.add(\"message\");\n  }\n\n  getMessageWin() {\n    const messageConT = document.querySelector(\".message-container\");\n    const messageWin = document.querySelector(\".message-win\");\n\n    messageConT.children[2].textContent = messageWin.textContent;\n    messageConT.children[2].classList.add(\"message-win\");\n    messageConT.children[2].classList.add(\"message\");\n  }\n\n  moveUp() {\n    if (!this.canContinueGame()) {\n      this.getMessage();\n      this.status = \"finished\";\n\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    const column1 = [];\n    const column2 = [];\n    const column3 = [];\n    const column4 = [];\n\n    this.board.forEach((row) => {\n      column1.push(row[0]);\n      column2.push(row[1]);\n      column3.push(row[2]);\n      column4.push(row[3]);\n    });\n\n    const mergeColumn = (column) => {\n      const merged = column.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2);\n          this.score += merged[i] * 2;\n          i += 2;\n        } else {\n          result.push(merged[i]);\n          i++;\n        }\n      }\n\n      while (result.length < 4) {\n        result.push(0);\n      }\n\n      return result;\n    };\n\n    const newColumn1 = mergeColumn(column1);\n    const newColumn2 = mergeColumn(column2);\n    const newColumn3 = mergeColumn(column3);\n    const newColumn4 = mergeColumn(column4);\n\n    this.board = [\n      [newColumn1[0], newColumn2[0], newColumn3[0], newColumn4[0]],\n      [newColumn1[1], newColumn2[1], newColumn3[1], newColumn4[1]],\n      [newColumn1[2], newColumn2[2], newColumn3[2], newColumn4[2]],\n      [newColumn1[3], newColumn2[3], newColumn3[3], newColumn4[3]],\n    ];\n\n    this.clearBoard();\n\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n      currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n      currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n      currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    this.updateBoardFromDOM();\n  } // Рух в верх.\n\n  moveDown() {\n    const column1 = [];\n    const column2 = [];\n    const column3 = [];\n    const column4 = [];\n\n    // Перетворюємо стовпці в масиви\n    this.board.forEach((row) => {\n      column1.push(row[0]);\n      column2.push(row[1]);\n      column3.push(row[2]);\n      column4.push(row[3]);\n    });\n\n    const mergeColumn = (column) => {\n      // Спочатку фільтруємо нулі\n      const merged = column.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вниз, щоб не було проміжків\n      while (result.length < 4) {\n        result.unshift(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен стовпець\n    const newColumn1 = mergeColumn(column1);\n    const newColumn2 = mergeColumn(column2);\n    const newColumn3 = mergeColumn(column3);\n    const newColumn4 = mergeColumn(column4);\n\n    this.board = [\n      [newColumn1[0], newColumn2[0], newColumn3[0], newColumn4[0]],\n      [newColumn1[1], newColumn2[1], newColumn3[1], newColumn4[1]],\n      [newColumn1[2], newColumn2[2], newColumn3[2], newColumn4[2]],\n      [newColumn1[3], newColumn2[3], newColumn3[3], newColumn4[3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = newColumn1[i] === 0 ? \"\" : newColumn1[i];\n      currentTr[1].textContent = newColumn2[i] === 0 ? \"\" : newColumn2[i];\n      currentTr[2].textContent = newColumn3[i] === 0 ? \"\" : newColumn3[i];\n      currentTr[3].textContent = newColumn4[i] === 0 ? \"\" : newColumn4[i];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Рух в вниз.\n\n  moveRight() {\n    if (!this.canContinueGame()) {\n      this.getMessage();\n      this.status = \"finished\";\n\n      return;\n    }\n\n    const mergeColumn = (row) => {\n      const merged = row.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вправо, щоб не було проміжків\n      while (result.length < 4) {\n        result.unshift(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен рядок\n\n    const arraRow = this.board.map((row) => mergeColumn(row));\n\n    this.board = [\n      [arraRow[0][0], arraRow[0][1], arraRow[0][2], arraRow[0][3]],\n      [arraRow[1][0], arraRow[1][1], arraRow[1][2], arraRow[1][3]],\n      [arraRow[2][0], arraRow[2][1], arraRow[2][2], arraRow[2][3]],\n      [arraRow[3][0], arraRow[3][1], arraRow[3][2], arraRow[3][3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n      currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n      currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n      currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Тільки ровні пацани йдуть туди.\n\n  moveLeft() {\n    const mergeColumn = (row) => {\n      const merged = row.filter((cell) => cell !== 0);\n      const result = [];\n      let i = 0;\n\n      // Злиття плиток\n      while (i < merged.length) {\n        if (i < merged.length - 1 && merged[i] === merged[i + 1]) {\n          result.push(merged[i] * 2); // Подвоїти плитки\n          this.score += merged[i] * 2; // Додаємо до рахунку\n          i += 2; // Пропускаємо наступну плитку після злиття\n        } else {\n          result.push(merged[i]); // Якщо плитки не однакові\n          i++;\n        }\n      }\n\n      // Переміщуємо плитки вправо, щоб не було проміжків\n      while (result.length < 4) {\n        result.push(0);\n      }\n\n      return result;\n    };\n\n    const oldBoard = JSON.stringify(this.board);\n\n    // Обробляємо кожен рядок\n\n    const arraRow = this.board.map((row) => mergeColumn(row));\n\n    this.board = [\n      [arraRow[0][0], arraRow[0][1], arraRow[0][2], arraRow[0][3]],\n      [arraRow[1][0], arraRow[1][1], arraRow[1][2], arraRow[1][3]],\n      [arraRow[2][0], arraRow[2][1], arraRow[2][2], arraRow[2][3]],\n      [arraRow[3][0], arraRow[3][1], arraRow[3][2], arraRow[3][3]],\n    ];\n\n    // Очищаємо дошку\n    this.clearBoard();\n\n    // Оновлення значень на сторінці\n    const arrayFromTr = Array.from(tbody.children);\n\n    for (let i = 0; i < arrayFromTr.length; i++) {\n      const currentTr = arrayFromTr[i].children;\n\n      currentTr[0].textContent = arraRow[i][0] === 0 ? \"\" : arraRow[i][0];\n      currentTr[1].textContent = arraRow[i][1] === 0 ? \"\" : arraRow[i][1];\n      currentTr[2].textContent = arraRow[i][2] === 0 ? \"\" : arraRow[i][2];\n      currentTr[3].textContent = arraRow[i][3] === 0 ? \"\" : arraRow[i][3];\n\n      if (currentTr[0].textContent !== \"\") {\n        currentTr[0].classList.add(\"activ\");\n      }\n\n      if (currentTr[1].textContent !== \"\") {\n        currentTr[1].classList.add(\"activ\");\n      }\n\n      if (currentTr[2].textContent !== \"\") {\n        currentTr[2].classList.add(\"activ\");\n      }\n\n      if (currentTr[3].textContent !== \"\") {\n        currentTr[3].classList.add(\"activ\");\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    if (oldBoard !== newBoard) {\n      this.spawnTile();\n    }\n\n    this.addColor();\n    this.addSCore();\n\n    const has2048 = this.board.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.getMessageWin();\n    }\n\n    // Оновлюємо дошку\n    this.updateBoardFromDOM();\n  } // Рух в ліво.\n}\n\nconst game2048 = new Game();\n\nbuttonOfStart.addEventListener(\"click\", () => {\n  game2048.start();\n});\n\ndocument.addEventListener(\"keydown\", (ewent) => {\n  switch (ewent.key) {\n    case \"ArrowUp\":\n      game2048.moveUp();\n      break;\n\n    case \"ArrowDown\":\n      game2048.moveDown();\n      break;\n\n    case \"ArrowRight\":\n      game2048.moveRight();\n      break;\n\n    case \"ArrowLeft\":\n      game2048.moveLeft();\n      break;\n  }\n});\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$3d28d7f1aac198f5$var$tbody","$3d28d7f1aac198f5$var$buttonOfStart","$3d28d7f1aac198f5$var$arrayTr","$3d28d7f1aac198f5$var$game2048","document","querySelector","Array","from","children","protoProps","Game","ss","key","value","_this","instance","Constructor","TypeError","forEach","tr","indexTr","td","indexTd","board","textContent","Object","defineProperty","enumerable","configurable","writable","obj","createEmptyBoard","score","status","deleteMessage","clearBoard","restart","addSCore","spawnTile","updateBoardFromDOM","messageStart","message","classList","remove","randomNumber","Math","floor","random","arraytr","canAddNewElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","array","some","err","return","randomTd","finish","contains","add","cells","querySelectorAll","cell","className","removeAttribute","button","messageConT","style","fontSize","columns","row","push","column","columnMerge","newColumn","filter","item","newColumnLength","length","y","rows","i","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","rowsMerge","newRow","newRowLength","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","row1","includes","gameScore","messageWin","canContinueGame","getMessage","oldBoard","JSON","stringify","column1","column2","column3","column4","mergeColumn","merged","result","newColumn1","newColumn2","newColumn3","newColumn4","arrayFromTr","currentTr","addColor","getMessageWin","unshift","arraRow","map","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","prototype","addEventListener","start","ewent","moveUp","moveDown","moveRight","moveLeft"],"version":3,"file":"index.5f022d86.js.map"}